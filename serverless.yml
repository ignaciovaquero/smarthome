# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: smarthome
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: go1.x
  region: eu-west-3
  apiGateway:
    apiKeySourceType: HEADER
    apiKeys:
      - name: smarthome
        description: API Key for accessing SmartHome API
    usagePlan:
      quota:
        limit: 5
        offset: 0
        period: DAY
      throttle:
        burstLimit: 100
        rateLimit: 50
  environment:
    SMARTHOME_AWS_REGION: eu-west-3
    SMARTHOME_JWT_SECRET: ${ssm:SMARTHOME_JWT_TOKEN~true}
    SMARTHOME_CORS_ORIGINS: "https://smarthome.ivaquero.es"
    SMARTHOME_JWT_EXPIRATION: 15m

  # you can overwrite defaults here
  #  stage: dev

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:*"
          Resource:
            - Fn::Join:
                - ""
                - arn:aws:dynamodb:eu-west-3:106260645150:table/ControlPlane
            - Fn::Join:
                - ""
                - arn:aws:dynamodb:eu-west-3:106260645150:table/Authentication

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  setroom:
    handler: bin/setroom
    events:
      - http:
          path: room/{room}
          method: post
          cors:
            origins:
              - https://smarthome.ivaquero.es
          request:
            parameters:
              paths:
                room: true
  getroom:
    handler: bin/getroom
    events:
      - http:
          path: room/{room}
          method: get
          cors:
            origins:
              - https://smarthome.ivaquero.es
          request:
            parameters:
              paths:
                room: true
  deleteroom:
    handler: bin/deleteroom
    events:
      - http:
          path: room/{room}
          method: delete
          cors:
            origins:
              - https://smarthome.ivaquero.es
          request:
            parameters:
              paths:
                room: true
  login:
    handler: bin/login
    events:
      - http:
          path: login
          method: post
          cors:
            origins:
              - https://smarthome.ivaquero.es
  signup:
    handler: bin/signup
    events:
      - http:
          path: signup
          private: true
          method: post
          cors:
            origins:
              - https://smarthome.ivaquero.es
  deleteuser:
    handler: bin/deleteuser
    events:
      - http:
          path: user
          private: true
          method: delete
          cors:
            origins:
              - https://smarthome.ivaquero.es

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    ControlPlane:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ControlPlane
        AttributeDefinitions:
          - AttributeName: Room
            AttributeType: S
        KeySchema:
          - AttributeName: Room
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    Authentication:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Authentication
        AttributeDefinitions:
          - AttributeName: Username
            AttributeType: S
        KeySchema:
          - AttributeName: Username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    # TemperatureOutside:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: TemperatureOutside
    #     AttributeDefinitions:
    #       - AttributeName: date
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: date
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    # TemperatureInside:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: TemperatureInside
    #     AttributeDefinitions:
    #       - AttributeName: date
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: date
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
